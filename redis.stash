# <#>Redis<> SpeedSheet
<b>Find what you need, faster.<>


# Help!

Want to contribute to this speedsheet?

You can submit updates on Github:
<l>https://github.com/speedsheet/speedsheets<>

SpeedSheet Format:
<l>/s/stash<>


We love having speedsheets for our favorite languages, libraries and tech. But we don't have remotely enough time for all the great docs we want to create. If you would like to help, it would be greatly appreciated! Send your updates to the <l https://github.com/speedsheet/speedsheets>speedsheets repo<>!

And thanks!


# Summary


### Configuration File

The default configuration file name:

<cb>redis.config<>


### Server Port (Default)

<cb>6379<>


### Server Configuration

Single threaded but has support for clustering (horizontal scaling, master/slave configuration).



# Server Commands



### Server - Build

From Redis Source Folder:

<cb>make<>



### Server - Start

<cb>redis-server<>

<cb>redis-server <v>path/to/redis.conf<><>



### Server - Stop

<cb>redis-server stop<>

<cb>redis-cli shutdown<>



### Server - Restart

<cb>redis-server restart <>



### Server Connection - Test

<cb>redis-cli ping<>
@
@ redis-cli ping



# Command Line Interface

<cb>redis-cli<>
@
@ redis-cli, cli



### CLI - Start

<cb>redis-cli<>
@
@ start cli, redis-cli



### CLI - Exit

<cb>exit<>

or

<cb>quit<>


Type <c>exit<> or <c>quit<> from inside the cli to exit.
@
@ cli, exit, quit, redis-cli



# Key


Commands:
<l>https://redis.io/commands#generic<>



### Key - Create / Update

<cb>set <v>key_name<> <v>value<><>
@
@ Set



### Key - Retrieve

<cb>get <v>key_name<><>

Returns the key's value.
@
@ get, item, value



### Key - Delete

<cb>del <v>key_name_1<><>

<cb>del <v>key_name_1<> <v>key_name_2<> <v>...<><>
@
@ del, remove



### Key - Type

<cb>type <v>key_name<><>

Returns the type of the key (e.g. string, list).
@
@ get, retrieve



### Keys - Count

<cb>dbsize<>



### Keys - Retrieve All

<cb>keys *<>

Lists all database key names.
@
@ get



# Data Types

<cb>none
hash
list
set
string
zset<>



# Type


## Hash

A map of field, value strings.

Type:

<cb>hash<>

Both fields and values are strings.
@
@ new, instantiate, create



## List

A list of strings ordered by insert order.

Type:

<cb>List<>


Create:

<cb>rpush <v>list_name<> <v>value_1<><>

<cb>rpush <v>list_name<> <v>value_1<> <v>value_2<> <v>...<><>



## List Operations


### List - Create

<cb>rpush <v>list_name<> <v>value_1<><>

<cb>rpush <v>list_name<> <v>value_1<> <v>value_2<> <v>...<><>


Creates a new list.
@
@ rpush, command
@ new, define, instantiate



### List - Get

<cb>lindex <v>list_name<> <v>index<><>


Returns an item from the list.

Indexes are zero based.
@
@ lindex, command
@ item, value, position, index, retrieve



### List - Get First

<cb>lindex <v>list_name<> 0<>


Returns the first item from a list.
@
@ lindex, command
@ item, value, top leftmost, retrieve



### List - Get Last

<cb>lindex <v>list_name<> -1<>


Returns the last item on a list.
@
@ lindex, command
@ item, value, end, rightmost, retrieve



### List - Get All

<cb>lrange <v>list_name<> 0 -1<>


Returns all items from a list.
@
@ lrange, command
@ key, retrieve



### List - Push To Beginning

<cb>lpush <v>list_name<> <v>value<><>


Adds an item to the beginning of the list (leftmost side).
@
@ lpush, command
@ key, item, value, add, insert, first, start, top, left, insert



### List - Push To End

<cb>rpush <v>list_name<> <v>value<><>


Adds an item to the end of the list (rightmost side).
@
@ rpush, command
@ key, item, value, add, last, append, rightmost



### List - Pop First Item

<cb>lpop <v>list_name<><>


Retrieves and removes frist item (leftmost side).
@
@ lpop, command
@ key, item, value, top, left



### List - Pop Last Item

<cb>rpop <v>list_name<><>

Retrieves
 and removes frist item (rightmost side).
@
@ rpop, command
@ key, item, value, end, rightmost.



### List - Size

<cb>llen <v>list_name<><>


Returns the number of items in the list.
@
@ llen, command
@ key, length, count



## Set

An unordered collection of strings.

Type:

<cb>set<>


Create:

<cb>sadd <v>set_1<> <v>value_1<> <v>value_2<> <v>...<><>



## Set Operations


### Set - Create

<cb>sadd <v>set_name<> <v>value_1<> <v>value_2<> <v>...<><>


Creates a new list (if doesn't exit) and adds the items to it.
@
@ sadd, command
@ new, define, instantiate



### Set - Contains Value?

<cb>sismember <v>set_1<> <v>value<><>


Returns all items in the set.
@
@ sismember
@ key, item, is member



### Set - Add

<cb>sadd <v>set_name<> <v>value_1<><>

<cb>sadd <v>set_name<> <v>value_1<> <v>value_2<> <v>...<><>


Adds one or more values to the set.
@
@ sadd, command



### Set - Get All

<cb>smembers <v>set_name<><>


Returns all items in the set.
@
@ smembers, command
@ key, length, count



### Set - Size

<cb>scard <v>set_name<><>


Returns the number of items in the set.
@
@ scard, command
@ key, length, count



## String

A string value

Type:

<cb>string<>


Create:

<cb>set <v>string_name<> "<v>string value.<>"<>


Commands:
<l>https://redis.io/commands#string<>



## String Operations


### String - Create:

<cb>set <v>string_name<> "<v>string value.<>"<>


Creates a new string (or updates it if it already exists).
@
@ set, command
@ new, define, instantiate



### String - Get

<cb>get <v>string_name<><>


Returns the value of the string.
@
@ get, command
@ item, value



### String - Update

<cb>set <v>string_name<> "<v>new string value.<>"<>


Updates the value of a string (or creates the string if it doesn't exist).
@
@ set, command
@ change, item, value



## ZSet

A sorted set of unique values.

Type:

<cb>zset<>


Create:

<cb>zadd <v>zset_name<> <v>value_1<><>

<cb>zadd <v>zset_name<> <v>value_1<> <v>value_2<> <v>...<><>


Commands:
<l>https://redis.io/commands#sorted_set<>



## ZSet Operations


### ZSet - Create

<cb>zadd <v>zset_name<> <v>value_1<><>

<cb>zadd <v>zset_name<> <v>value_1<> <v>value_2<> <v>...<><>


Creates a new ZSet (or adds values to it if it already exists).
@
@ zadd, command
@ new, define, instantiate


### ZSet - Add

<cb>zadd <v>zset_name<> <v>value_1<><>

<cb>zadd <v>zset_name<> <v>value_1<> <v>value_2<> <v>...<><>


Adds a value to a zset (will create the set if it doesn't exist).
@
@ zadd, command



# Glossary


### Redis
Remote Dictionary Service
@
@ Remote Dictionary Service


